#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <math.h>

#define EMPTY_CODE 0
#define KNIGHT_CODE 1
#define KING_CODE 2
#define PEASANT_CODE 3

int max(int a, int b)
{
	if (a < b)
		return b;
	else
		return a;
}

int min(int a, int b)
{
	if (a < b)
		return a;
	else
		return b;
}

typedef enum def_PieceType {
	empty = EMPTY_CODE,
	knight = KNIGHT_CODE,
	king = KING_CODE,
	peasant = PEASANT_CODE 
} PieceType;

typedef struct def_Piece {
	PieceType type;	
	int team;
	int x, y;
} Piece;

typedef struct def_PiecesList {
	Piece *current;
	struct def_PiecesList *next;
} PiecesList;

typedef struct def_Board {
	int size;
	int maxMoves;
	PiecesList *piecesList;
	int currentMove;
	int currentPlayer;
} Board;

Board *board = 0;

Board* constructBoard(int n, int maxMoves)
{
	Board *ret = malloc(sizeof(Board));	
	ret->size = n;
	ret->piecesList = 0;
	ret->maxMoves = maxMoves;
	ret->currentMove = 0;
	ret->currentPlayer = 0;
	return ret;
}

void start_game() {
	
}

Piece *getPiece(Board *board, int x, int y) 
{
	PiecesList *p = board->piecesList;
	while (p != 0)
	{
		if (p->current->x == x && p->current->y == y)
			return p->current;
		p = p->next;
	}	
	return 0;
}

char pieceToChar(Piece *piece)
{
	if (piece == 0)
		return '.';
	char conv[] = ".rkc";
	char ret = conv[piece->type];
	if (piece->team == 0)
		ret = tolower(ret);
	return ret;
}

void print_topleft() 
{
	for (int i = 0; i < 10; i++)
	{
		for (int j = 0; j < 10; j++)
			printf("%c", pieceToChar(getPiece(board, i, j)));
		printf("\n");
	}
}

int checkCoordinates(Board *board, int x, int y)
{
	if (board->size < max(x, y) || min(x, y) <= 0)
		return 0;
	return 1;
}

PiecesList *addElementToList(PiecesList *list, Piece *e)
{
	PiecesList *ret = malloc(sizeof(PiecesList));
	ret->current = e;
	ret->next = list;
	return ret;
}

int addPiece(Board *board, Piece *piece)
{
	if (!checkCoordinates(board, piece->x, piece->y))
		return 0;
	board->piecesList = addElementToList(board->piecesList, piece);	
	return 1;
}

Piece *constructPiece(int x, int y, int player, PieceType type)
{
	Piece *ret = malloc(sizeof(Piece));
	ret->x = x;
	ret->y = y;
	ret->team = player;
	ret->type = type;
	return ret;
}

int setupLine(Board *board, int x, int y, int player)
{
	PieceType types[] = {king, peasant, knight, knight};
	for (int i = 0; i < 4; i++)
	{
		if (!checkCoordinates(board, x + i, y))
			return 0;
		if (!addPiece(board, constructPiece(x + i, y, player, types[i])))
			return 0;
	}

	return 1; 
}

int checkSetupLine(Board *board, int x, int y, int player)
{
	PieceType types[] = {king, peasant, knight, knight};
	for (int i = 0; i < 4; i++)
	{
		if (!checkCoordinates(board, x + i, y))
			return 0;
		Piece *cur = getPiece(board, x + i, y);
		if (cur->type != types[i] || cur->team != player)
			return 0;
	}

	return 1; 
}

int init(int n, int k, int p, int x1, int y1, int x2, int y2) 
{ 
	if (x1 == x2 && y1 == y2)
		return 0;
	if (n < 0)
		return 0;
	if (k < 0)
		return 0;
	if (p < 0 || p > 2)
		return 0;

	if (board == 0)
	{
		board = constructBoard(n, k);
		if (!setupLine(board, x1, y1, p))
			return 0;
		
		p++;
		if (p == 3)
			p = 2;

		if (!setupLine(board, x2, y2, p))
			return 0;
	}
	else 
	{
		if (!checkSetupLine(board, x1, y1, p))
			return 0;

		p++;
		if (p == 3)
			p = 2;

		if (!checkSetupLine(board, x2, y2, p))
			return 0;
	}
	return 1;
}

int checkMove(int x1, int y1, int x2, int y2)
{
	int dx = abs(x2 - x1);
	int dy = abs(y2 - y1);
	if (max(dx, dy) > 1)
		return 0;
	if (!checkCoordinates(board, x1, y1))
		return 0;
	if (!checkCoordinates(board, x2, y2))
		return 0;
	return 1;
}

int fight(PieceType type1, PieceType type2)
{
	if (type1 == type2)
		return 0;
	if (type1 == knight)
		return 1;
	if (type2 == knight)
		return -1;
	if (type1 == king)
		return 1;
	return 0;
}

PiecesList *removeFromList(PiecesList *list, int x, int y)
{
	if (list == 0)
		return 0;
	if (list->current->x == x && list->current->y == y)
	{
		return list->next;
	}
	list->next = removeFromList(list, x, y);
	return list;
}

void deleteList(PiecesList *list)
{
	if (list == 0)
		return;
	deleteList(list->next);
	free(list->current);
	free(list);
}

void deleteBoard() 
{
	deleteList(board->piecesList);
	free(board);
}

int removePiece(Board *board, int x, int y)
{
	board->piecesList = removeFromList(board->piecesList, x, y);
	return 1;
}

int move(int x1, int y1, int x2, int y2) 
{
	if (!checkMove(x1, y1, x2, y2))
		return 0;
	Piece *piece = getPiece(board, x1, y1);
	if (piece == 0 || piece->team != board->currentPlayer)
		return 0;
	Piece *target = getPiece(board, x2, y2);
	if (target == 0)
	{
		piece->x = x2;
		piece->y = y2;
	}
	else
	{
		int f = fight(piece->type, target->type);
		if (f == 0)
		{
			removePiece(board, x1, y1);
			removePiece(board, x2, y2);
		}
		else if (f == 1)
		{
			removePiece(board, x2, y2);
			piece->x = x2;
			piece->y = y2;
		}
		else if (f == -1)
		{
			removePiece(board, x1, y1);	
		}
	}
	return 1;
}

int produce_knight(int x1, int y1, int x2, int y2) {
	if (!checkMove(x1, y1, x2, y2))
		return 0;
	Piece *piece = getPiece(board, x1, y1);
	if (piece == 0 || piece->type != peasant || piece->team != board->currentPlayer)
		return 0;
	Piece *target = getPiece(board, x2, y2);	
	if (target == 0)
	{
		addPiece(board, constructPiece(x2, y2, board->currentPlayer, knight));
		return 1;
	}
	else
	{
		int f = fight(knight, target->type);
		if (f == 0)
		{
			removePiece(board, x2, y2);
		}
		else if (f == 1)
		{
			removePiece(board, x2, y2);
			addPiece(board, constructPiece(x2, y2, board->currentPlayer, knight));
		}
	}
	return 1;
}

int produce_peasant(int x1, int y1, int x2, int y2) {
	if (!checkMove(x1, y1, x2, y2))
		return 0;
	Piece *piece = getPiece(board, x1, y1);
	if (piece == 0 || piece->type != peasant || piece->team != board->currentPlayer)
		return 0;
	Piece *target = getPiece(board, x2, y2);	
	if (target == 0)
	{
		addPiece(board, constructPiece(x2, y2, board->currentPlayer, knight));
		return 1;
	}
	else
	{
		int f = fight(peasant, target->type);
		if (f == 0)
		{
			removePiece(board, x2, y2);
		}
		else if (f == 1)
		{
			removePiece(board, x2, y2);
			addPiece(board, constructPiece(x2, y2, board->currentPlayer, peasant));
		}
	}
	return 1;
}

int end_turn() 
{
	if (board->currentPlayer == 1)
	{
		board->currentPlayer = 2;
	}
	else
	{
		board->currentPlayer = 1;
		board->currentMove++;
	}
	return 1;
}

void end_game() {
	deleteBoard();
}

